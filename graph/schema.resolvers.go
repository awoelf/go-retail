package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"log"

	"github.com/awoelf/go-retail/graph/model"
)

// AddItem is the resolver for the addItem field.
func (r *mutationResolver) AddItem(ctx context.Context, input *model.NewItem) (*model.Item, error) {
	res, err := r.Services.Item.AddItem(ctx, input)
	if err != nil {
		log.Fatal(err)
	}

	return &model.Item{
		DepartmentID:   res.DepartmentID,
		Name:           res.Name,
		Price:          res.Price,
		Qty:            res.Qty,
		QtySold:        res.QtySold,
		Category:       res.Category,
		Promo:          res.Promo,
		PromoPrice:     res.PromoPrice,
		TotalSalesItem: res.TotalSalesItem,
		Aisle:          res.Aisle,
	}, nil
}

// UpdateItem is the resolver for the updateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, input *model.UpdateItem) (*model.Item, error) {
	res, err := r.Services.Item.UpdateItem(ctx, input)
	if err != nil {
		log.Fatal(err)
	}

	return &model.Item{
		ID:             res.ID,
		DepartmentID:   *res.DepartmentID,
		Name:           *res.Name,
		Price:          *res.Price,
		Qty:            *res.Qty,
		QtySold:        res.QtySold,
		Category:       res.Category,
		Promo:          res.Promo,
		PromoPrice:     res.PromoPrice,
		TotalSalesItem: res.TotalSalesItem,
		Aisle:          *res.Aisle,
	}, nil
}

// DeleteItem is the resolver for the deleteItem field.
func (r *mutationResolver) DeleteItem(ctx context.Context, id *string) (*string, error) {
	err := r.Services.Item.DeleteItem(ctx, id)
	if err != nil {
		log.Fatal(err)
	}

	return id, nil
}

// SellItem is the resolver for the sellItem field.
func (r *mutationResolver) SellItem(ctx context.Context, input *model.ItemTransaction) (*model.Item, error) {
	res, err := r.Services.Item.SellItem(ctx, input)
	if err != nil {
		log.Fatal(err)
	}

	return &model.Item{
		ID: res.ID,
	}, nil
}

// ReturnItem is the resolver for the returnItem field.
func (r *mutationResolver) ReturnItem(ctx context.Context, input *model.ItemTransaction) (*model.Item, error) {
	res, err := r.Services.Item.ReturnItem(ctx, input)
	if err != nil {
		log.Fatal(err)
	}

	return &model.Item{
		ID: res.ID,
	}, nil
}

// OrderItems is the resolver for the orderItems field.
func (r *mutationResolver) OrderItems(ctx context.Context, input *model.ItemOrder) (*model.Item, error) {
	res, err := r.Services.Item.OrderItems(ctx, input)
	if err != nil {
		log.Fatal(err)
	}

	return &model.Item{
		ID: res.ID,
	}, nil
}

// StartSaleItem is the resolver for the startSaleItem field.
func (r *mutationResolver) StartSaleItem(ctx context.Context, input *model.ItemPromotion) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: StartSaleItem - startSaleItem"))
}

// EndSaleItem is the resolver for the endSaleItem field.
func (r *mutationResolver) EndSaleItem(ctx context.Context, input *string) (*string, error) {
	panic(fmt.Errorf("not implemented: EndSaleItem - endSaleItem"))
}

// AddDepartment is the resolver for the addDepartment field.
func (r *mutationResolver) AddDepartment(ctx context.Context, input *model.NewDepartment) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: AddDepartment - addDepartment"))
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, input *model.UpdateDepartment) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: UpdateDepartment - updateDepartment"))
}

// DeleteDepartment is the resolver for the deleteDepartment field.
func (r *mutationResolver) DeleteDepartment(ctx context.Context, id *string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteDepartment - deleteDepartment"))
}

// AddManager is the resolver for the addManager field.
func (r *mutationResolver) AddManager(ctx context.Context, input *model.NewManager) (*model.Manager, error) {
	panic(fmt.Errorf("not implemented: AddManager - addManager"))
}

// UpdateManager is the resolver for the updateManager field.
func (r *mutationResolver) UpdateManager(ctx context.Context, input *model.UpdateManager) (*model.Manager, error) {
	panic(fmt.Errorf("not implemented: UpdateManager - updateManager"))
}

// DeleteManager is the resolver for the deleteManager field.
func (r *mutationResolver) DeleteManager(ctx context.Context, id *string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteManager - deleteManager"))
}

// GetAllItems is the resolver for the getAllItems field.
func (r *queryResolver) GetAllItems(ctx context.Context) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: GetAllItems - getAllItems"))
}

// GetItemByID is the resolver for the getItemById field.
func (r *queryResolver) GetItemByID(ctx context.Context, id *string) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: GetItemByID - getItemById"))
}

// GetTopItems is the resolver for the getTopItems field.
func (r *queryResolver) GetTopItems(ctx context.Context) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: GetTopItems - getTopItems"))
}

// GetItemsByCategory is the resolver for the getItemsByCategory field.
func (r *queryResolver) GetItemsByCategory(ctx context.Context, category *string) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: GetItemsByCategory - getItemsByCategory"))
}

// GetAllDepartments is the resolver for the getAllDepartments field.
func (r *queryResolver) GetAllDepartments(ctx context.Context) ([]*model.Department, error) {
	panic(fmt.Errorf("not implemented: GetAllDepartments - getAllDepartments"))
}

// GetDepartmentByID is the resolver for the getDepartmentById field.
func (r *queryResolver) GetDepartmentByID(ctx context.Context, id *string) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: GetDepartmentByID - getDepartmentById"))
}

// GetTopDepartments is the resolver for the getTopDepartments field.
func (r *queryResolver) GetTopDepartments(ctx context.Context) ([]*model.Department, error) {
	panic(fmt.Errorf("not implemented: GetTopDepartments - getTopDepartments"))
}

// GetAllManagers is the resolver for the getAllManagers field.
func (r *queryResolver) GetAllManagers(ctx context.Context) ([]*model.Manager, error) {
	panic(fmt.Errorf("not implemented: GetAllManagers - getAllManagers"))
}

// GetManagerByID is the resolver for the getManagerById field.
func (r *queryResolver) GetManagerByID(ctx context.Context, id *string) (*model.Manager, error) {
	panic(fmt.Errorf("not implemented: GetManagerByID - getManagerById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
