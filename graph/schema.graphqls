# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# TODO: Add TRANSACTION, USER, STORE

type Department {
	id: ID!
	name: String!
	totalSalesDept: Float
	createdAt: String
	updatedAt: String
}

type Manager {
	id: ID!
	departmentId: ID # FK
	firstName: String!
	lastName: String!
	createdAt: String
	updatedAt: String
}

type Item {
	id: ID!
	departmentId: ID! # FK
	name: String!
	price: Float!
	qty: Int!
	qtySold: Int
	category: String
	promo: Boolean
	promoPrice: Float
	totalSalesItem: Float
	aisle: String!
	createdAt: String
	updatedAt: String
}

type Transaction {
	id: ID!
	type: String!
	paymentMethod: String!
	items: [ID]!
	qtyItems: Int!
	totalCost: Float!
	savings: Float!
	createdAt: String!
	updatedAt: String!
}

input NewItem {
	departmentId: ID! # FK
	name: String!
	price: Float!
	qty: Int!
	qtySold: Int
	category: String
	promo: Boolean
	promoPrice: Float
	totalSalesItem: Float
	aisle: String!
}

input UpdateItem {
	id: ID!
	departmentId: ID
	name: String
	price: Float
	qty: Int
	qtySold: Int
	category: String
	promo: Boolean
	promoPrice: Float
	totalSalesItem: Float
	aisle: String
}

input ItemOrder {
	id: ID!
	qtyOrder: Int!
}

input ItemPromotion {
	id: ID!
	promo: Boolean!
	promoPrice: Float!
}

input NewDepartment {
	name: String!
}

input UpdateDepartment {
	id: ID!
	name: String!
}

input NewManager {
	firstName: String!
	lastName: String!
	departmentId: ID!
}

input UpdateManager {
	id: ID!
	firstName: String!
	lastName: String!
	departmentId: ID!
}

input NewTransaction {
	type: String!
	paymentMethod: String!
	items: [ID]!
}

type Query {
	getAllItems: [Item]
	getItemById(id: ID): Item
	getTopItems: [Item]
	getItemsByCategory(category: String): [Item]
	getAllDepartments: [Department]
	getDepartmentById(id: ID): Department
	getTopDepartments: [Department]
	getAllManagers: [Manager]
	getManagerById(id: ID): Manager
}

type Mutation {
	addItem(input: NewItem): Item
	updateItem(input: UpdateItem): Item
	deleteItem(id: ID): ID
	sellTransaction(input: NewTransaction): Transaction
	returnTransaction(input: NewTransaction): Transaction
	orderItems(input: ItemOrder): Item
	startSaleItem(input: ItemPromotion): Item
	endSaleItem(input: ID): ID
	addDepartment(input: NewDepartment): Department
	updateDepartment(input: UpdateDepartment): Department
	deleteDepartment(id: ID): ID
	addManager(input: NewManager): Manager
	updateManager(input: UpdateManager): Manager
	deleteManager(id: ID): ID
}
