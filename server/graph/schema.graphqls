# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# User and store will be added later

type Item {
	id: Int!
	name: String!
	price: Float!
	qty: Int!
	category: String!
	promotion: Boolean
	replenish: Boolean
	totalSalesItem: Float
	aisle: Int!
	departmentId: Int! # FK
	createdAt: String
	updatedAt: String
}

type Department {
	id: Int!
	name: String!
	totalSalesDept: Float
	createdAt: String
	updatedAt: String
}

# Later, I might implement an Employee model,
# and the manager model will be an extension of it.
type Manager {
	id: Int!
	firstName: String!
	lastName: String!
	departmentId: Int # FK
	createdAt: String
	updatedAt: String
}

input NewItem {
	name: String!
	price: Float!
	qty: Int!
	category: String!
	aisle: Int!
	departmentId: Int! # FK
}

input UpdateItem {
	id: Int!
	name: String!
	price: Float!
	qty: Int!
	category: String!
	promotion: Boolean!
	replenish: Boolean!
	totalSalesItem: Float!
	aisle: Int!
	departmentId: Int!
}

input SellItem {
	id: Int!
	qty: Int!
	price: Float!
	departmentId: Int!
}

input NewDepartment {
	name: String!
}

input UpdateDepartment {
	id: Int!
	name: String!
	totalSalesDept: Float!
}

input NewManager {
	firstName: String!
	lastName: String!
	departmentId: Int!
}

input UpdateManager {
	id: Int!
	firstName: String!
	lastName: String!
	departmentId: Int!
}

type Query {
	getAllItems: [Item]
	getItemById(id: Int): Item
	getTopItems: [Item]
	getItemsByCategory(category: String): [Item]
	getAllDepartments: [Department]
	getDepartmentById(id: Int): Department
	getTopDepartments: [Department]
	getAllManagers: [Manager]
	getManagerById(id: Int): Manager
}

type Mutation {
	addItem(input: NewItem): Item
	updateItem(input: UpdateItem): Item
	deleteItem(id: Int): Int
	sellItem(input: SellItem): Item
	returnItem: Item
	orderItems: [Item]
	setSaleItem: Item
	addDepartment(input: NewDepartment): Department
	updateDepartment(input: UpdateDepartment): Department
	deleteDepartment(id: Int): Int
	addManager(input: NewManager): Manager
	updateManager(input: UpdateManager): Manager
	deleteManager(id: Int): Int
}
