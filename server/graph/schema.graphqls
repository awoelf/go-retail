# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# User and store will be added later

type Item {
  id: Int!
  name: String!
  price: Float!
  qty: Int!
  category: String!
  promotion: Boolean
  promotionPrice: Float
  replenish: Boolean
  totalSalesWeekItem: Float
  aisleId: String! # FK (Foreign Key)
  departmentId: String! # FK
}

type Department {
  id: Int!
  name: String!
  totalSalesWeekDept: Float
}

type Aisle {
  id: Int!
  departmentId: String! # FK
}

# Later, I might implement an Employee model,
# and the manager model will be an extension of it.
type Manager {
  id: Int!
  firstName: String!
  lastName: String!
  departmentId: String # FK
}

input NewItem {
  name: String!
  price: Float!
  qty: Int!
  category: String!
  aisleId: String! # FK
  departmentId: String! # FK
}

input NewAisle {
  departmentId: String! # FK
}

input NewDepartment {
  name: String!
}

input NewManager {
  firstName: String!
  lastName: String!
  departmentId: String # FK
}

type Query {
  getAllItems: [Item]
  getItemById: Item
  getAllDepartments: [Department]
  getDepartmentById: Department
  getAllAisles: [Aisle]
  getAisleById: Aisle
  getAllManagers: [Manager]
  getManagerById: Manager
  getTopItems: [Item]
  getTopDepartments: [Department]
}

type Mutation {
  addItem(input: NewItem): Item
  updateItem: Item
  deleteItem: Item
  sellItem: Item
  returnItem: Item
  orderItems: [Item]
  setSaleItem: Item
  addDepartment(input: NewDepartment): Department
  updateDepartment: Department
  deleteDepartment: Department
  addAisle(input: NewAisle): Aisle
  updateAisle: Aisle
  deleteAisle: Aisle
  addManager(input: NewManager): Manager
  updateManager: Manager
  deleteManager: Manager
}
